/*
 * Public NWK REST API
 *
 * Public LORIOT Network Server NWK REST API documentation
 *
 * The version of the OpenAPI document: 5.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct LoriotDevice {
    /// Device EUI
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub _id: Option<String>,
    /// Device address
    #[serde(rename = "devaddr", skip_serializing_if = "Option::is_none")]
    pub devaddr: Option<String>,
    /// uplink sequence number
    #[serde(rename = "seqno", skip_serializing_if = "Option::is_none")]
    pub seqno: Option<f32>,
    /// downlink sequence number
    #[serde(rename = "seqdn", skip_serializing_if = "Option::is_none")]
    pub seqdn: Option<f32>,
    /// queued sequence number
    #[serde(rename = "seqq", skip_serializing_if = "Option::is_none")]
    pub seqq: Option<f32>,
    /// number of frames since last ADR
    #[serde(rename = "adrCnt", skip_serializing_if = "Option::is_none")]
    pub adr_cnt: Option<f32>,
    /// Subscription type (suspended status)
    #[serde(rename = "subscription", skip_serializing_if = "Option::is_none")]
    pub subscription: Option<f32>,
    #[serde(rename = "txrate", skip_serializing_if = "Option::is_none")]
    pub txrate: Option<f32>,
    #[serde(rename = "rxrate", skip_serializing_if = "Option::is_none")]
    pub rxrate: Option<f32>,
    /// Device LoRaWAN class type
    #[serde(rename = "devclass", skip_serializing_if = "Option::is_none")]
    pub devclass: Option<String>,
    /// Receive window to be used after uplink transmission
    #[serde(rename = "rxw", skip_serializing_if = "Option::is_none")]
    pub rxw: Option<f32>,
    /// Device duty cycle
    #[serde(rename = "dutycycle", skip_serializing_if = "Option::is_none")]
    pub dutycycle: Option<f32>,
    /// Enable/disable adaptative data rate (ADR) for device
    #[serde(rename = "adr", skip_serializing_if = "Option::is_none")]
    pub adr: Option<bool>,
    /// Minimum data rate to use for device when ADR is enabled
    #[serde(rename = "adrMin", skip_serializing_if = "Option::is_none")]
    pub adr_min: Option<f32>,
    /// Maximum data rate to use for device when ADR is enabled
    #[serde(rename = "adrMax", skip_serializing_if = "Option::is_none")]
    pub adr_max: Option<f32>,
    /// Fixed value for data rate when ADR is enabled
    #[serde(rename = "adrFix", skip_serializing_if = "Option::is_none")]
    pub adr_fix: Option<f32>,
    /// Flag to relax or strict uplink seqno check
    #[serde(rename = "seqrelax", skip_serializing_if = "Option::is_none")]
    pub seqrelax: Option<bool>,
    /// Flag to reset sequence downlink when old uplink seqno received
    #[serde(rename = "seqdnreset", skip_serializing_if = "Option::is_none")]
    pub seqdnreset: Option<bool>,
    /// Random nonce number received from last JoinReq message
    #[serde(rename = "nonce", skip_serializing_if = "Option::is_none")]
    pub nonce: Option<f32>,
    /// Date from last successful JoinReq
    #[serde(rename = "lastJoin", skip_serializing_if = "Option::is_none")]
    pub last_join: Option<String>,
    /// Last device seen date
    #[serde(rename = "lastSeen", skip_serializing_if = "Option::is_none")]
    pub last_seen: Option<f32>,
    /// Received Signal Strength Indicator
    #[serde(rename = "rssi", skip_serializing_if = "Option::is_none")]
    pub rssi: Option<f32>,
    /// Signal Noise Ratio
    #[serde(rename = "snr", skip_serializing_if = "Option::is_none")]
    pub snr: Option<f32>,
    /// Frequency of last frame
    #[serde(rename = "freq", skip_serializing_if = "Option::is_none")]
    pub freq: Option<f32>,
    /// Spreading Factor of last frame
    #[serde(rename = "sf", skip_serializing_if = "Option::is_none")]
    pub sf: Option<f32>,
    /// Bandwidth of last frame
    #[serde(rename = "bw", skip_serializing_if = "Option::is_none")]
    pub bw: Option<f32>,
    /// Gateway EUI of last frame received
    #[serde(rename = "gw", skip_serializing_if = "Option::is_none")]
    pub gw: Option<String>,
    /// Global application ID in IEEE EUI64 address space that uniquely identifies the application provider (i.e., owner) of the end-device. 
    #[serde(rename = "appeui", skip_serializing_if = "Option::is_none")]
    pub appeui: Option<String>,
    /// Date of last time DevStatus MAC command received
    #[serde(rename = "lastDevStatusSeen", skip_serializing_if = "Option::is_none")]
    pub last_dev_status_seen: Option<String>,
    /// Battery value encoded to a byte from DevStatusAns command
    #[serde(rename = "bat", skip_serializing_if = "Option::is_none")]
    pub bat: Option<f32>,
    /// Device demulation signal-to-noise ratio in Db to the nearest integer value for the last successfully received DevStatusReq command 
    #[serde(rename = "devSnr", skip_serializing_if = "Option::is_none")]
    pub dev_snr: Option<f32>,
    #[serde(rename = "lorawan", skip_serializing_if = "Option::is_none")]
    pub lorawan: Option<crate::models::LoriotDeviceLorawan>,
}

impl LoriotDevice {
    pub fn new() -> LoriotDevice {
        LoriotDevice {
            _id: None,
            devaddr: None,
            seqno: None,
            seqdn: None,
            seqq: None,
            adr_cnt: None,
            subscription: None,
            txrate: None,
            rxrate: None,
            devclass: None,
            rxw: None,
            dutycycle: None,
            adr: None,
            adr_min: None,
            adr_max: None,
            adr_fix: None,
            seqrelax: None,
            seqdnreset: None,
            nonce: None,
            last_join: None,
            last_seen: None,
            rssi: None,
            snr: None,
            freq: None,
            sf: None,
            bw: None,
            gw: None,
            appeui: None,
            last_dev_status_seen: None,
            bat: None,
            dev_snr: None,
            lorawan: None,
        }
    }
}


