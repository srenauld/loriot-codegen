/*
 * Public NWK REST API
 *
 * Public LORIOT Network Server NWK REST API documentation
 *
 * The version of the OpenAPI document: 5.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub struct LoriotApplication {
    /// Application ID
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub _id: Option<f32>,
    /// Application name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Creation date
    #[serde(rename = "created", skip_serializing_if = "Option::is_none")]
    pub created: Option<String>,
    /// Amount of devices registered for the application
    #[serde(rename = "devices", skip_serializing_if = "Option::is_none")]
    pub devices: Option<f32>,
    /// Limit of devices which can be registered
    #[serde(rename = "deviceLimit", skip_serializing_if = "Option::is_none")]
    pub device_limit: Option<f32>,
    /// Data Output name to be used to publish LoRaWAN information
    #[serde(rename = "output", skip_serializing_if = "Option::is_none")]
    pub output: Option<String>,
    /// Internal configuration for selected Data Output
    #[serde(rename = "osetup", skip_serializing_if = "Option::is_none")]
    pub osetup: Option<serde_json::Value>,
    /// Amount of verbosity for LoRaWAN information
    #[serde(rename = "overbosity", skip_serializing_if = "Option::is_none")]
    pub overbosity: Option<LoriotOverbosity>,
    /// Gateway information feed verbosity
    #[serde(rename = "ogwinfo", skip_serializing_if = "Option::is_none")]
    pub ogwinfo: Option<LoriotOgwinfo>,
    /// Suspended application status
    #[serde(rename = "suspended", skip_serializing_if = "Option::is_none")]
    pub suspended: Option<bool>,
    /// Enable/disable RX messages output
    #[serde(rename = "orx", skip_serializing_if = "Option::is_none")]
    pub orx: Option<bool>,
    /// Application EUI
    #[serde(rename = "appeui", skip_serializing_if = "Option::is_none")]
    pub appeui: Option<String>,
    /// Join Server EUI to handle JoinReq messages
    #[serde(rename = "joinServerId", skip_serializing_if = "Option::is_none")]
    pub join_server_id: Option<String>,
    /// Flag to enable/disable usage of OTAA JoinReq messages
    #[serde(rename = "canotaa", skip_serializing_if = "Option::is_none")]
    pub canotaa: Option<bool>,
    /// Flag to publish AppSKey after successful JoinReq
    #[serde(rename = "publishAppSKey", skip_serializing_if = "Option::is_none")]
    pub publish_app_s_key: Option<bool>,
    /// Maximum number of concurrent connections to Data Output
    #[serde(rename = "clientsLimit", skip_serializing_if = "Option::is_none")]
    pub clients_limit: Option<f32>,
    /// Status flag to enable/disable sending custom properties to be published\\ for each uplink data message 
    #[serde(rename = "customPropertiesUplinkDataMessage", skip_serializing_if = "Option::is_none")]
    pub custom_properties_uplink_data_message: Option<bool>,
}

impl LoriotApplication {
    pub fn new() -> LoriotApplication {
        LoriotApplication {
            _id: None,
            name: None,
            created: None,
            devices: None,
            device_limit: None,
            output: None,
            osetup: None,
            overbosity: None,
            ogwinfo: None,
            suspended: None,
            orx: None,
            appeui: None,
            join_server_id: None,
            canotaa: None,
            publish_app_s_key: None,
            clients_limit: None,
            custom_properties_uplink_data_message: None,
        }
    }
}

/// Amount of verbosity for LoRaWAN information
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum LoriotOverbosity {
    #[serde(rename = "full")]
    Full,
    #[serde(rename = "min")]
    Min,
}
/// Gateway information feed verbosity
#[derive(Debug, PartialEq, Serialize, Deserialize)]
pub enum LoriotOgwinfo {
    #[serde(rename = "none")]
    None,
    #[serde(rename = "rssi")]
    Rssi,
    #[serde(rename = "gwid")]
    Gwid,
    #[serde(rename = "full")]
    Full,
}

