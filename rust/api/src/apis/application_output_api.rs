/*
 * Public NWK REST API
 *
 * Public LORIOT Network Server NWK REST API documentation
 *
 * The version of the OpenAPI document: 5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use futures::{Future};
use reqwest;

use super::{Error, configuration};

pub struct ApplicationOutputApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl ApplicationOutputApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> ApplicationOutputApiClient {
        ApplicationOutputApiClient {
            configuration,
        }
    }
}

pub trait ApplicationOutputApi {
    fn loriot_1_nwk_app_appid_outputs_get(&self, APPID: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotAppDataOutputType>, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_outputs_outputid_delete(&self, APPID: &str, OUTPUTID: &str) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_outputs_post(&self, APPID: &str, loriot_inline_object1: crate::models::LoriotInlineObject1) -> Box<dyn Future<Item = Vec<crate::models::LoriotOutputDetail>, Error = Error> + Send>;
    fn loriot_1_nwk_apps_output_get(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LoriotOutputDetail>, Error = Error> + Send>;
    fn loriot_1_nwk_apps_output_outputid_get(&self, OUTPUTID: &str) -> Box<dyn Future<Item = crate::models::LoriotOutputDetail, Error = Error> + Send>;
}

impl ApplicationOutputApi for ApplicationOutputApiClient {
    fn loriot_1_nwk_app_appid_outputs_get(&self, APPID: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotAppDataOutputType>, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/outputs", configuration.base_path, APPID=crate::apis::urlencode(APPID));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_outputs_outputid_delete(&self, APPID: &str, OUTPUTID: &str) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/outputs/{OUTPUTID}", configuration.base_path, APPID=crate::apis::urlencode(APPID), OUTPUTID=crate::apis::urlencode(OUTPUTID));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_outputs_post(&self, APPID: &str, loriot_inline_object1: crate::models::LoriotInlineObject1) -> Box<dyn Future<Item = Vec<crate::models::LoriotOutputDetail>, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/outputs", configuration.base_path, APPID=crate::apis::urlencode(APPID));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object1);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_apps_output_get(&self, ) -> Box<dyn Future<Item = Vec<crate::models::LoriotOutputDetail>, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/apps/output", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_apps_output_outputid_get(&self, OUTPUTID: &str) -> Box<dyn Future<Item = crate::models::LoriotOutputDetail, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/apps/output/{OUTPUTID}", configuration.base_path, OUTPUTID=crate::apis::urlencode(OUTPUTID));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

}
