/*
 * Public NWK REST API
 *
 * Public LORIOT Network Server NWK REST API documentation
 *
 * The version of the OpenAPI document: 5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use futures::{Future};
use reqwest;

use super::{Error, configuration};

pub struct DevicesApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl DevicesApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> DevicesApiClient {
        DevicesApiClient {
            configuration,
        }
    }
}

pub trait DevicesApi {
    fn loriot_1_nwk_app_appid_device_deveui_appkey_delete(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_appkey_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object11: Option<crate::models::LoriotInlineObject11>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse2009, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_appskey_delete(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_appskey_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object12: Option<crate::models::LoriotInlineObject12>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20010, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_delete(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_dutycycle_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object13: Option<crate::models::LoriotInlineObject13>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20010, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_flushqueue_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object16: Option<crate::models::LoriotInlineObject16>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_get(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_last_data_get(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotLastDataDevice>, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_log_get(&self, APPID: &str, DEVEUI: &str, page: f32, per_page: f32, filetype: Option<&str>, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse2002, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_mac_commands_get(&self, page: f32, per_page: f32, APPID: &str, DEVEUI: &str, filter: Option<&str>, sort: Option<&str>, command: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotDeviceMacCommandPaged, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object10: Option<crate::models::LoriotInlineObject10>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_radio_freq_get(&self, APPID: &str, DEVEUI: &str, FREQ: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotInlineResponse2007>, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_seqdn_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object15: Option<crate::models::LoriotInlineObject15>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_seqno_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object14: Option<crate::models::LoriotInlineObject14>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_tag_tagname_delete(&self, APPID: &str, DEVEUI: &str, TAGNAME: &str) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_tag_tagname_post(&self, APPID: &str, DEVEUI: &str, TAGNAME: &str, loriot_inline_object9: Option<crate::models::LoriotInlineObject9>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_tags_get(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotDevicetag>, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_device_deveui_traffic_freq_get(&self, APPID: &str, DEVEUI: &str, FREQ: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotInlineResponse2008>, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_devices_abp_post(&self, APPID: &str, loriot_inline_object7: Option<crate::models::LoriotInlineObject7>) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_devices_get(&self, APPID: &str, page: f32, per_page: f32, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotPaginationDevices, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_devices_otaa_post(&self, APPID: &str, loriot_inline_object8: Option<crate::models::LoriotInlineObject8>) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send>;
    fn loriot_1_nwk_app_appid_devices_post(&self, APPID: &str, loriot_inline_object6: Option<crate::models::LoriotInlineObject6>) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send>;
}

impl DevicesApi for DevicesApiClient {
    fn loriot_1_nwk_app_appid_device_deveui_appkey_delete(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/appkey", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_appkey_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object11: Option<crate::models::LoriotInlineObject11>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse2009, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/appkey", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object11);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_appskey_delete(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/appskey", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_appskey_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object12: Option<crate::models::LoriotInlineObject12>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20010, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/appskey", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object12);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_delete(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_dutycycle_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object13: Option<crate::models::LoriotInlineObject13>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20010, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/dutycycle", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object13);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_flushqueue_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object16: Option<crate::models::LoriotInlineObject16>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/flushqueue", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object16);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_get(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_last_data_get(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotLastDataDevice>, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/last_data", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_log_get(&self, APPID: &str, DEVEUI: &str, page: f32, per_page: f32, filetype: Option<&str>, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse2002, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/log", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref s) = filetype {
            req_builder = req_builder.query(&[("filetype", &s.to_string())]);
        }
        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("perPage", &per_page.to_string())]);
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_mac_commands_get(&self, page: f32, per_page: f32, APPID: &str, DEVEUI: &str, filter: Option<&str>, sort: Option<&str>, command: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotDeviceMacCommandPaged, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/mac-commands", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("perPage", &per_page.to_string())]);
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref s) = command {
            req_builder = req_builder.query(&[("command", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object10: Option<crate::models::LoriotInlineObject10>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object10);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_radio_freq_get(&self, APPID: &str, DEVEUI: &str, FREQ: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotInlineResponse2007>, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/radio_{FREQ}", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI), FREQ=crate::apis::urlencode(FREQ));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_seqdn_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object15: Option<crate::models::LoriotInlineObject15>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/seqdn", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object15);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_seqno_post(&self, APPID: &str, DEVEUI: &str, loriot_inline_object14: Option<crate::models::LoriotInlineObject14>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/seqno", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object14);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_tag_tagname_delete(&self, APPID: &str, DEVEUI: &str, TAGNAME: &str) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/tag/{TAGNAME}", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI), TAGNAME=crate::apis::urlencode(TAGNAME));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_tag_tagname_post(&self, APPID: &str, DEVEUI: &str, TAGNAME: &str, loriot_inline_object9: Option<crate::models::LoriotInlineObject9>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/tag/{TAGNAME}", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI), TAGNAME=crate::apis::urlencode(TAGNAME));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object9);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_tags_get(&self, APPID: &str, DEVEUI: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotDevicetag>, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/tags/", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_device_deveui_traffic_freq_get(&self, APPID: &str, DEVEUI: &str, FREQ: &str) -> Box<dyn Future<Item = Vec<crate::models::LoriotInlineResponse2008>, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/device/{DEVEUI}/traffic_{FREQ}", configuration.base_path, APPID=crate::apis::urlencode(APPID), DEVEUI=crate::apis::urlencode(DEVEUI), FREQ=crate::apis::urlencode(FREQ));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_devices_abp_post(&self, APPID: &str, loriot_inline_object7: Option<crate::models::LoriotInlineObject7>) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/devices/abp", configuration.base_path, APPID=crate::apis::urlencode(APPID));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object7);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_devices_get(&self, APPID: &str, page: f32, per_page: f32, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotPaginationDevices, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/devices", configuration.base_path, APPID=crate::apis::urlencode(APPID));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("perPage", &per_page.to_string())]);
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_devices_otaa_post(&self, APPID: &str, loriot_inline_object8: Option<crate::models::LoriotInlineObject8>) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/devices/otaa", configuration.base_path, APPID=crate::apis::urlencode(APPID));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object8);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_app_appid_devices_post(&self, APPID: &str, loriot_inline_object6: Option<crate::models::LoriotInlineObject6>) -> Box<dyn Future<Item = crate::models::LoriotDevice, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/app/{APPID}/devices", configuration.base_path, APPID=crate::apis::urlencode(APPID));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object6);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

}
