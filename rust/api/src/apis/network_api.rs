/*
 * Public NWK REST API
 *
 * Public LORIOT Network Server NWK REST API documentation
 *
 * The version of the OpenAPI document: 5.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use futures::{Future};
use reqwest;

use super::{Error, configuration};

pub struct NetworkApiClient {
    configuration: Arc<configuration::Configuration>,
}

impl NetworkApiClient {
    pub fn new(configuration: Arc<configuration::Configuration>) -> NetworkApiClient {
        NetworkApiClient {
            configuration,
        }
    }
}

pub trait NetworkApi {
    fn loriot_1_nwk_network_roamingid_delete(&self, roamingid: &str) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_network_roamingid_gateway_gweui_move_targetroamingid_put(&self, roamingid: &str, gweui: &str, targetroamingid: &str, body: Option<bool>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_network_roamingid_gateways_get(&self, roamingid: &str, page: f32, per_page: f32, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20012, Error = Error> + Send>;
    fn loriot_1_nwk_network_roamingid_gateways_post(&self, roamingid: &str, loriot_inline_object20: Option<crate::models::LoriotInlineObject20>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20013, Error = Error> + Send>;
    fn loriot_1_nwk_network_roamingid_get(&self, roamingid: &str) -> Box<dyn Future<Item = crate::models::LoriotGatewayNetwork, Error = Error> + Send>;
    fn loriot_1_nwk_network_roamingid_location_put(&self, roamingid: &str, loriot_inline_object21: Option<crate::models::LoriotInlineObject21>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_network_roamingid_put(&self, roamingid: &str, loriot_gateway_network: Option<crate::models::LoriotGatewayNetwork>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_network_roamingid_visibility_put(&self, roamingid: &str, loriot_inline_object22: Option<crate::models::LoriotInlineObject22>) -> Box<dyn Future<Item = (), Error = Error> + Send>;
    fn loriot_1_nwk_networks_get(&self, page: f32, per_page: f32, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20014, Error = Error> + Send>;
    fn loriot_1_nwk_networks_post(&self, loriot_inline_object23: Option<crate::models::LoriotInlineObject23>) -> Box<dyn Future<Item = crate::models::LoriotGatewayNetwork, Error = Error> + Send>;
}

impl NetworkApi for NetworkApiClient {
    fn loriot_1_nwk_network_roamingid_delete(&self, roamingid: &str) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}", configuration.base_path, roamingid=crate::apis::urlencode(roamingid));
        let mut req_builder = client.delete(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_network_roamingid_gateway_gweui_move_targetroamingid_put(&self, roamingid: &str, gweui: &str, targetroamingid: &str, body: Option<bool>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}/gateway/{gweui}/move/{targetroamingid}", configuration.base_path, roamingid=crate::apis::urlencode(roamingid), gweui=crate::apis::urlencode(gweui), targetroamingid=crate::apis::urlencode(targetroamingid));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&body);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_network_roamingid_gateways_get(&self, roamingid: &str, page: f32, per_page: f32, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20012, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}/gateways", configuration.base_path, roamingid=crate::apis::urlencode(roamingid));
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("perPage", &per_page.to_string())]);
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_network_roamingid_gateways_post(&self, roamingid: &str, loriot_inline_object20: Option<crate::models::LoriotInlineObject20>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20013, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}/gateways", configuration.base_path, roamingid=crate::apis::urlencode(roamingid));
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object20);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_network_roamingid_get(&self, roamingid: &str) -> Box<dyn Future<Item = crate::models::LoriotGatewayNetwork, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}", configuration.base_path, roamingid=crate::apis::urlencode(roamingid));
        let mut req_builder = client.get(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_network_roamingid_location_put(&self, roamingid: &str, loriot_inline_object21: Option<crate::models::LoriotInlineObject21>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}/location", configuration.base_path, roamingid=crate::apis::urlencode(roamingid));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object21);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_network_roamingid_put(&self, roamingid: &str, loriot_gateway_network: Option<crate::models::LoriotGatewayNetwork>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}", configuration.base_path, roamingid=crate::apis::urlencode(roamingid));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_gateway_network);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_network_roamingid_visibility_put(&self, roamingid: &str, loriot_inline_object22: Option<crate::models::LoriotInlineObject22>) -> Box<dyn Future<Item = (), Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/network/{roamingid}/visibility", configuration.base_path, roamingid=crate::apis::urlencode(roamingid));
        let mut req_builder = client.put(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object22);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .map(|_| ())
            .from_err()
        )
    }

    fn loriot_1_nwk_networks_get(&self, page: f32, per_page: f32, filter: Option<&str>, sort: Option<&str>) -> Box<dyn Future<Item = crate::models::LoriotInlineResponse20014, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/networks", configuration.base_path);
        let mut req_builder = client.get(uri_str.as_str());

        req_builder = req_builder.query(&[("page", &page.to_string())]);
        req_builder = req_builder.query(&[("perPage", &per_page.to_string())]);
        if let Some(ref s) = filter {
            req_builder = req_builder.query(&[("filter", &s.to_string())]);
        }
        if let Some(ref s) = sort {
            req_builder = req_builder.query(&[("sort", &s.to_string())]);
        }
        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

    fn loriot_1_nwk_networks_post(&self, loriot_inline_object23: Option<crate::models::LoriotInlineObject23>) -> Box<dyn Future<Item = crate::models::LoriotGatewayNetwork, Error = Error> + Send> {
        let configuration: &configuration::Configuration = self.configuration.borrow();
        let client = &configuration.client;

        let uri_str = format!("{}/1/nwk/networks", configuration.base_path);
        let mut req_builder = client.post(uri_str.as_str());

        if let Some(ref user_agent) = configuration.user_agent {
            req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
        }
        if let Some(ref token) = configuration.bearer_access_token {
            req_builder = req_builder.bearer_auth(token.to_owned());
        };
        if let Some(ref apikey) = configuration.api_key {
            let key = apikey.key.clone();
            let val = match apikey.prefix {
                Some(ref prefix) => format!("{} {}", prefix, key),
                None => key,
            };
            req_builder = req_builder.header("Authorization", val);
        };
        req_builder = req_builder.json(&loriot_inline_object23);

        // send request
        Box::new(req_builder.send()
            .and_then(|i| i.error_for_status())
            .and_then(|mut i| i.json())
            .from_err()
        )
    }

}
